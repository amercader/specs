_model: specification
---
title: Table Schema
---
slug: table-schema
---
mediatype: application/vnd.tableschema+json
---
subtitle: A simple format to declare a schema for tabular data.
---
version: 1.0.0-rc.1
---
updated: 30 January 2017
---
created: 12 November 2012
---
descriptor: tableschema.json
---
abstract:

Table Schema is a simple, language and implementation agnostic, way to declare a schema for tabular data. The Table Schema specification has been designed to be expressible in JSON.
---
body:

Table Schema is a simple language- and implementation-agnostic way to declare a schema for tabular data. Table Schema is well suited for use cases around handling and validating tabular data in text formats such as CSV, but its utility extends well beyond this core usage, towards a range of application a where data benefits from a portable schema format.

In its simplest form, Table Schema is an `object` with a `fields` property as an array, and each item in the array is a **field descriptor**, with information on the expected **type** for data in each field. In this basis, Table Schema also supports declaring more complex shapes for data via `format` and `constraints` options per field, as well as more advanced data structures with handling of `primaryKey` and `foreignKeys` constructs.

While **field descriptors** can support complex types via `type`, `format` and `constraints`, the only required property for a field is `name`, and the absence of the additional modifiers indicates that the field is a string of the `default` format (meaning, any format), and values are not required (`constraints.required == false`).

As a **foreign key** often needs to be able to reference other data resources, the referenced resources need to be in a specific structure in order to work. Therefore, foreign keys only work across valid [Tabular Data Resource](/tabular-dataresource/) objects. The special case of `reference.resource` as an empty string is a self-reference, for foreign keys to self.

Table Schema is heavily based on similar specifications and implementations, in particular [XML Schema](http://www.w3.org/TR/xmlschema-2/#built-in-primitive-datatypes), [GoogleBigQuery](https://developers.google.com/bigquery/docs/import#loading_json_files), [JSON Schema](http://json-schema.org), [DSPL](https://developers.google.com/public-data/docs/schema/dspl18), [HTML5 Forms](http://www.whatwg.org/specs/web-apps/current-work/#attr-input-type), and [Elasticsearch](http://www.elasticsearch.org/guide/reference/mapping/).

See below for examples, and a full description of the properties found on Table Schema.
